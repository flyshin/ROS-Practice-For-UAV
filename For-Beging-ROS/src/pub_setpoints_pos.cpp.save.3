#include <ros/ros.h>
#include <std_msgs/String.h> 
#include <stdio.h>
#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/Vector3Stamped.h"



geometry_msgs::PoseStamped current_state;
void state_cb(const geometry_msgs::PoseStamped::ConstPtr& msg)
{

 current_state =  *msg;
}




int main(int argc, char **argv)
{
   ros::init(argc, argv, "pub_setpoints");
   ros::NodeHandle n;

   ros::Publisher dm_pub = n.advertise<geometry_msgs::PoseStamped>("/mavros/setpoint_position/local",100);
   ros::Subscriber state_sub = n.subscribe<geometry_msgs::PoseStamped>("/mavros/local_position/pose",100,state_cb);
  
   ros::Rate loop_rate(100);
   ros::spinOnce();

   geometry_msgs::PoseStamped pos;
   int count = 1;
	
		//PositionReciever qp;:
 		//Body some_object;
		//qp.connect_to_server();

	
   while(ros::ok()){
	   //some_object = qp.getStatus();
		// some_object.print();
		//printf("%f\n",some_object.position_x);
       pos.header.stamp = ros::Time::now();
       pos.header.seq=count;
       pos.header.frame_id = 1;

      
     // if(current_state.pose.position.y < -9.5 && current_state.pose.position.  )
     // {
       
       pos.pose.position.x =  0;//0.001*some_object.position_x;
       pos.pose.position.y = -10.0;//0.001*some_object.position_y;
       pos.pose.position.z = 10.0;//0.001*some_object.position_z;       
      
       pos.pose.orientation.x = 0;
       pos.pose.orientation.y = 0;
       pos.pose.orientation.z = 0;
       pos.pose.orientation.w = 1;


     /* else
       pos.pose.position.x = 0;
       pos.pose.position.y = -10.0;
       pos.pose.position.z = 10.0;

       pos.pose.orientation.x = 0;
       pos.pose.orientation.y = 0;
       pos.pose.orientation.z = 0;
       pos.pose.orientation.w = 1;
     }


     */



  /* if(current_state.pose.position.y < -9.0    )
      {       

             pos.pose.position.y = 0;
             pos.pose.position.x = 10;
      }  

   */


     




     bash: y: command not found
 dm_pub.publish(pos);



       ros::spinOnce();
       count++;
       loop_rate.sleep();
   }
   
      
   return 0;
}
